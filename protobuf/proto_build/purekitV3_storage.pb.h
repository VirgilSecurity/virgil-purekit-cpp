// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: purekitV3_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_purekitV3_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_purekitV3_5fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_purekitV3_5fstorage_2eproto;
namespace build {
class CellKey;
class CellKeyDefaultTypeInternal;
extern CellKeyDefaultTypeInternal _CellKey_default_instance_;
class CellKeySigned;
class CellKeySignedDefaultTypeInternal;
extern CellKeySignedDefaultTypeInternal _CellKeySigned_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class RoleAssignment;
class RoleAssignmentDefaultTypeInternal;
extern RoleAssignmentDefaultTypeInternal _RoleAssignment_default_instance_;
class RoleAssignmentSigned;
class RoleAssignmentSignedDefaultTypeInternal;
extern RoleAssignmentSignedDefaultTypeInternal _RoleAssignmentSigned_default_instance_;
class RoleSigned;
class RoleSignedDefaultTypeInternal;
extern RoleSignedDefaultTypeInternal _RoleSigned_default_instance_;
class UserRecord;
class UserRecordDefaultTypeInternal;
extern UserRecordDefaultTypeInternal _UserRecord_default_instance_;
class UserRecordSigned;
class UserRecordSignedDefaultTypeInternal;
extern UserRecordSignedDefaultTypeInternal _UserRecordSigned_default_instance_;
class UserRecords;
class UserRecordsDefaultTypeInternal;
extern UserRecordsDefaultTypeInternal _UserRecords_default_instance_;
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::CellKey* Arena::CreateMaybeMessage<::build::CellKey>(Arena*);
template<> ::build::CellKeySigned* Arena::CreateMaybeMessage<::build::CellKeySigned>(Arena*);
template<> ::build::Role* Arena::CreateMaybeMessage<::build::Role>(Arena*);
template<> ::build::RoleAssignment* Arena::CreateMaybeMessage<::build::RoleAssignment>(Arena*);
template<> ::build::RoleAssignmentSigned* Arena::CreateMaybeMessage<::build::RoleAssignmentSigned>(Arena*);
template<> ::build::RoleSigned* Arena::CreateMaybeMessage<::build::RoleSigned>(Arena*);
template<> ::build::UserRecord* Arena::CreateMaybeMessage<::build::UserRecord>(Arena*);
template<> ::build::UserRecordSigned* Arena::CreateMaybeMessage<::build::UserRecordSigned>(Arena*);
template<> ::build::UserRecords* Arena::CreateMaybeMessage<::build::UserRecords>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {

// ===================================================================

class UserRecordSigned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.UserRecordSigned) */ {
 public:
  UserRecordSigned();
  virtual ~UserRecordSigned();

  UserRecordSigned(const UserRecordSigned& from);
  UserRecordSigned(UserRecordSigned&& from) noexcept
    : UserRecordSigned() {
    *this = ::std::move(from);
  }

  inline UserRecordSigned& operator=(const UserRecordSigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRecordSigned& operator=(UserRecordSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRecordSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRecordSigned* internal_default_instance() {
    return reinterpret_cast<const UserRecordSigned*>(
               &_UserRecordSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRecordSigned& a, UserRecordSigned& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRecordSigned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRecordSigned* New() const final {
    return CreateMaybeMessage<UserRecordSigned>(nullptr);
  }

  UserRecordSigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRecordSigned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRecordSigned& from);
  void MergeFrom(const UserRecordSigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRecordSigned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.UserRecordSigned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPheRecordNsFieldNumber = 3,
    kPheRecordNcFieldNumber = 4,
    kUpkFieldNumber = 5,
    kEncryptedUskFieldNumber = 6,
    kEncryptedUskBackupFieldNumber = 7,
    kEncryptedPwdHashFieldNumber = 8,
    kVersionFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes phe_record_ns = 3;
  void clear_phe_record_ns();
  const std::string& phe_record_ns() const;
  void set_phe_record_ns(const std::string& value);
  void set_phe_record_ns(std::string&& value);
  void set_phe_record_ns(const char* value);
  void set_phe_record_ns(const void* value, size_t size);
  std::string* mutable_phe_record_ns();
  std::string* release_phe_record_ns();
  void set_allocated_phe_record_ns(std::string* phe_record_ns);
  private:
  const std::string& _internal_phe_record_ns() const;
  void _internal_set_phe_record_ns(const std::string& value);
  std::string* _internal_mutable_phe_record_ns();
  public:

  // bytes phe_record_nc = 4;
  void clear_phe_record_nc();
  const std::string& phe_record_nc() const;
  void set_phe_record_nc(const std::string& value);
  void set_phe_record_nc(std::string&& value);
  void set_phe_record_nc(const char* value);
  void set_phe_record_nc(const void* value, size_t size);
  std::string* mutable_phe_record_nc();
  std::string* release_phe_record_nc();
  void set_allocated_phe_record_nc(std::string* phe_record_nc);
  private:
  const std::string& _internal_phe_record_nc() const;
  void _internal_set_phe_record_nc(const std::string& value);
  std::string* _internal_mutable_phe_record_nc();
  public:

  // bytes upk = 5;
  void clear_upk();
  const std::string& upk() const;
  void set_upk(const std::string& value);
  void set_upk(std::string&& value);
  void set_upk(const char* value);
  void set_upk(const void* value, size_t size);
  std::string* mutable_upk();
  std::string* release_upk();
  void set_allocated_upk(std::string* upk);
  private:
  const std::string& _internal_upk() const;
  void _internal_set_upk(const std::string& value);
  std::string* _internal_mutable_upk();
  public:

  // bytes encrypted_usk = 6;
  void clear_encrypted_usk();
  const std::string& encrypted_usk() const;
  void set_encrypted_usk(const std::string& value);
  void set_encrypted_usk(std::string&& value);
  void set_encrypted_usk(const char* value);
  void set_encrypted_usk(const void* value, size_t size);
  std::string* mutable_encrypted_usk();
  std::string* release_encrypted_usk();
  void set_allocated_encrypted_usk(std::string* encrypted_usk);
  private:
  const std::string& _internal_encrypted_usk() const;
  void _internal_set_encrypted_usk(const std::string& value);
  std::string* _internal_mutable_encrypted_usk();
  public:

  // bytes encrypted_usk_backup = 7;
  void clear_encrypted_usk_backup();
  const std::string& encrypted_usk_backup() const;
  void set_encrypted_usk_backup(const std::string& value);
  void set_encrypted_usk_backup(std::string&& value);
  void set_encrypted_usk_backup(const char* value);
  void set_encrypted_usk_backup(const void* value, size_t size);
  std::string* mutable_encrypted_usk_backup();
  std::string* release_encrypted_usk_backup();
  void set_allocated_encrypted_usk_backup(std::string* encrypted_usk_backup);
  private:
  const std::string& _internal_encrypted_usk_backup() const;
  void _internal_set_encrypted_usk_backup(const std::string& value);
  std::string* _internal_mutable_encrypted_usk_backup();
  public:

  // bytes encrypted_pwd_hash = 8;
  void clear_encrypted_pwd_hash();
  const std::string& encrypted_pwd_hash() const;
  void set_encrypted_pwd_hash(const std::string& value);
  void set_encrypted_pwd_hash(std::string&& value);
  void set_encrypted_pwd_hash(const char* value);
  void set_encrypted_pwd_hash(const void* value, size_t size);
  std::string* mutable_encrypted_pwd_hash();
  std::string* release_encrypted_pwd_hash();
  void set_allocated_encrypted_pwd_hash(std::string* encrypted_pwd_hash);
  private:
  const std::string& _internal_encrypted_pwd_hash() const;
  void _internal_set_encrypted_pwd_hash(const std::string& value);
  std::string* _internal_mutable_encrypted_pwd_hash();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.UserRecordSigned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phe_record_ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phe_record_nc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_usk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_usk_backup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_pwd_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.UserRecord) */ {
 public:
  UserRecord();
  virtual ~UserRecord();

  UserRecord(const UserRecord& from);
  UserRecord(UserRecord&& from) noexcept
    : UserRecord() {
    *this = ::std::move(from);
  }

  inline UserRecord& operator=(const UserRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRecord& operator=(UserRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRecord* internal_default_instance() {
    return reinterpret_cast<const UserRecord*>(
               &_UserRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRecord& a, UserRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRecord* New() const final {
    return CreateMaybeMessage<UserRecord>(nullptr);
  }

  UserRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRecord& from);
  void MergeFrom(const UserRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.UserRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRecordSignedFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kPheRecordT0FieldNumber = 4,
    kPheRecordT1FieldNumber = 5,
    kVersionFieldNumber = 1,
    kPheRecordVersionFieldNumber = 6,
  };
  // bytes user_record_signed = 2;
  void clear_user_record_signed();
  const std::string& user_record_signed() const;
  void set_user_record_signed(const std::string& value);
  void set_user_record_signed(std::string&& value);
  void set_user_record_signed(const char* value);
  void set_user_record_signed(const void* value, size_t size);
  std::string* mutable_user_record_signed();
  std::string* release_user_record_signed();
  void set_allocated_user_record_signed(std::string* user_record_signed);
  private:
  const std::string& _internal_user_record_signed() const;
  void _internal_set_user_record_signed(const std::string& value);
  std::string* _internal_mutable_user_record_signed();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes phe_record_t0 = 4;
  void clear_phe_record_t0();
  const std::string& phe_record_t0() const;
  void set_phe_record_t0(const std::string& value);
  void set_phe_record_t0(std::string&& value);
  void set_phe_record_t0(const char* value);
  void set_phe_record_t0(const void* value, size_t size);
  std::string* mutable_phe_record_t0();
  std::string* release_phe_record_t0();
  void set_allocated_phe_record_t0(std::string* phe_record_t0);
  private:
  const std::string& _internal_phe_record_t0() const;
  void _internal_set_phe_record_t0(const std::string& value);
  std::string* _internal_mutable_phe_record_t0();
  public:

  // bytes phe_record_t1 = 5;
  void clear_phe_record_t1();
  const std::string& phe_record_t1() const;
  void set_phe_record_t1(const std::string& value);
  void set_phe_record_t1(std::string&& value);
  void set_phe_record_t1(const char* value);
  void set_phe_record_t1(const void* value, size_t size);
  std::string* mutable_phe_record_t1();
  std::string* release_phe_record_t1();
  void set_allocated_phe_record_t1(std::string* phe_record_t1);
  private:
  const std::string& _internal_phe_record_t1() const;
  void _internal_set_phe_record_t1(const std::string& value);
  std::string* _internal_mutable_phe_record_t1();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 phe_record_version = 6;
  void clear_phe_record_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 phe_record_version() const;
  void set_phe_record_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phe_record_version() const;
  void _internal_set_phe_record_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.UserRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_record_signed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phe_record_t0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phe_record_t1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phe_record_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.UserRecords) */ {
 public:
  UserRecords();
  virtual ~UserRecords();

  UserRecords(const UserRecords& from);
  UserRecords(UserRecords&& from) noexcept
    : UserRecords() {
    *this = ::std::move(from);
  }

  inline UserRecords& operator=(const UserRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRecords& operator=(UserRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRecords* internal_default_instance() {
    return reinterpret_cast<const UserRecords*>(
               &_UserRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserRecords& a, UserRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRecords* New() const final {
    return CreateMaybeMessage<UserRecords>(nullptr);
  }

  UserRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRecords& from);
  void MergeFrom(const UserRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.UserRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRecordsFieldNumber = 1,
  };
  // repeated .build.UserRecord user_records = 1;
  int user_records_size() const;
  private:
  int _internal_user_records_size() const;
  public:
  void clear_user_records();
  ::build::UserRecord* mutable_user_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::UserRecord >*
      mutable_user_records();
  private:
  const ::build::UserRecord& _internal_user_records(int index) const;
  ::build::UserRecord* _internal_add_user_records();
  public:
  const ::build::UserRecord& user_records(int index) const;
  ::build::UserRecord* add_user_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::UserRecord >&
      user_records() const;

  // @@protoc_insertion_point(class_scope:build.UserRecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::UserRecord > user_records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CellKeySigned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.CellKeySigned) */ {
 public:
  CellKeySigned();
  virtual ~CellKeySigned();

  CellKeySigned(const CellKeySigned& from);
  CellKeySigned(CellKeySigned&& from) noexcept
    : CellKeySigned() {
    *this = ::std::move(from);
  }

  inline CellKeySigned& operator=(const CellKeySigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellKeySigned& operator=(CellKeySigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellKeySigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellKeySigned* internal_default_instance() {
    return reinterpret_cast<const CellKeySigned*>(
               &_CellKeySigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CellKeySigned& a, CellKeySigned& b) {
    a.Swap(&b);
  }
  inline void Swap(CellKeySigned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellKeySigned* New() const final {
    return CreateMaybeMessage<CellKeySigned>(nullptr);
  }

  CellKeySigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellKeySigned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellKeySigned& from);
  void MergeFrom(const CellKeySigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellKeySigned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.CellKeySigned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kDataIdFieldNumber = 3,
    kCpkFieldNumber = 4,
    kEncryptedCskCmsFieldNumber = 5,
    kEncryptedCskBodyFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // string userId = 2;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string dataId = 3;
  void clear_dataid();
  const std::string& dataid() const;
  void set_dataid(const std::string& value);
  void set_dataid(std::string&& value);
  void set_dataid(const char* value);
  void set_dataid(const char* value, size_t size);
  std::string* mutable_dataid();
  std::string* release_dataid();
  void set_allocated_dataid(std::string* dataid);
  private:
  const std::string& _internal_dataid() const;
  void _internal_set_dataid(const std::string& value);
  std::string* _internal_mutable_dataid();
  public:

  // bytes cpk = 4;
  void clear_cpk();
  const std::string& cpk() const;
  void set_cpk(const std::string& value);
  void set_cpk(std::string&& value);
  void set_cpk(const char* value);
  void set_cpk(const void* value, size_t size);
  std::string* mutable_cpk();
  std::string* release_cpk();
  void set_allocated_cpk(std::string* cpk);
  private:
  const std::string& _internal_cpk() const;
  void _internal_set_cpk(const std::string& value);
  std::string* _internal_mutable_cpk();
  public:

  // bytes encrypted_csk_cms = 5;
  void clear_encrypted_csk_cms();
  const std::string& encrypted_csk_cms() const;
  void set_encrypted_csk_cms(const std::string& value);
  void set_encrypted_csk_cms(std::string&& value);
  void set_encrypted_csk_cms(const char* value);
  void set_encrypted_csk_cms(const void* value, size_t size);
  std::string* mutable_encrypted_csk_cms();
  std::string* release_encrypted_csk_cms();
  void set_allocated_encrypted_csk_cms(std::string* encrypted_csk_cms);
  private:
  const std::string& _internal_encrypted_csk_cms() const;
  void _internal_set_encrypted_csk_cms(const std::string& value);
  std::string* _internal_mutable_encrypted_csk_cms();
  public:

  // bytes encrypted_csk_body = 6;
  void clear_encrypted_csk_body();
  const std::string& encrypted_csk_body() const;
  void set_encrypted_csk_body(const std::string& value);
  void set_encrypted_csk_body(std::string&& value);
  void set_encrypted_csk_body(const char* value);
  void set_encrypted_csk_body(const void* value, size_t size);
  std::string* mutable_encrypted_csk_body();
  std::string* release_encrypted_csk_body();
  void set_allocated_encrypted_csk_body(std::string* encrypted_csk_body);
  private:
  const std::string& _internal_encrypted_csk_body() const;
  void _internal_set_encrypted_csk_body(const std::string& value);
  std::string* _internal_mutable_encrypted_csk_body();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.CellKeySigned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_csk_cms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_csk_body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CellKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.CellKey) */ {
 public:
  CellKey();
  virtual ~CellKey();

  CellKey(const CellKey& from);
  CellKey(CellKey&& from) noexcept
    : CellKey() {
    *this = ::std::move(from);
  }

  inline CellKey& operator=(const CellKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellKey& operator=(CellKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellKey* internal_default_instance() {
    return reinterpret_cast<const CellKey*>(
               &_CellKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CellKey& a, CellKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CellKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellKey* New() const final {
    return CreateMaybeMessage<CellKey>(nullptr);
  }

  CellKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellKey& from);
  void MergeFrom(const CellKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.CellKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellKeySignedFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes cell_key_signed = 2;
  void clear_cell_key_signed();
  const std::string& cell_key_signed() const;
  void set_cell_key_signed(const std::string& value);
  void set_cell_key_signed(std::string&& value);
  void set_cell_key_signed(const char* value);
  void set_cell_key_signed(const void* value, size_t size);
  std::string* mutable_cell_key_signed();
  std::string* release_cell_key_signed();
  void set_allocated_cell_key_signed(std::string* cell_key_signed);
  private:
  const std::string& _internal_cell_key_signed() const;
  void _internal_set_cell_key_signed(const std::string& value);
  std::string* _internal_mutable_cell_key_signed();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.CellKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_key_signed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class RoleSigned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.RoleSigned) */ {
 public:
  RoleSigned();
  virtual ~RoleSigned();

  RoleSigned(const RoleSigned& from);
  RoleSigned(RoleSigned&& from) noexcept
    : RoleSigned() {
    *this = ::std::move(from);
  }

  inline RoleSigned& operator=(const RoleSigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleSigned& operator=(RoleSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleSigned* internal_default_instance() {
    return reinterpret_cast<const RoleSigned*>(
               &_RoleSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoleSigned& a, RoleSigned& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleSigned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleSigned* New() const final {
    return CreateMaybeMessage<RoleSigned>(nullptr);
  }

  RoleSigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleSigned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleSigned& from);
  void MergeFrom(const RoleSigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSigned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.RoleSigned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRpkFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes rpk = 3;
  void clear_rpk();
  const std::string& rpk() const;
  void set_rpk(const std::string& value);
  void set_rpk(std::string&& value);
  void set_rpk(const char* value);
  void set_rpk(const void* value, size_t size);
  std::string* mutable_rpk();
  std::string* release_rpk();
  void set_allocated_rpk(std::string* rpk);
  private:
  const std::string& _internal_rpk() const;
  void _internal_set_rpk(const std::string& value);
  std::string* _internal_mutable_rpk();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.RoleSigned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleSignedFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes role_signed = 2;
  void clear_role_signed();
  const std::string& role_signed() const;
  void set_role_signed(const std::string& value);
  void set_role_signed(std::string&& value);
  void set_role_signed(const char* value);
  void set_role_signed(const void* value, size_t size);
  std::string* mutable_role_signed();
  std::string* release_role_signed();
  void set_allocated_role_signed(std::string* role_signed);
  private:
  const std::string& _internal_role_signed() const;
  void _internal_set_role_signed(const std::string& value);
  std::string* _internal_mutable_role_signed();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.Role)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_signed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class RoleAssignmentSigned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.RoleAssignmentSigned) */ {
 public:
  RoleAssignmentSigned();
  virtual ~RoleAssignmentSigned();

  RoleAssignmentSigned(const RoleAssignmentSigned& from);
  RoleAssignmentSigned(RoleAssignmentSigned&& from) noexcept
    : RoleAssignmentSigned() {
    *this = ::std::move(from);
  }

  inline RoleAssignmentSigned& operator=(const RoleAssignmentSigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAssignmentSigned& operator=(RoleAssignmentSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleAssignmentSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAssignmentSigned* internal_default_instance() {
    return reinterpret_cast<const RoleAssignmentSigned*>(
               &_RoleAssignmentSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoleAssignmentSigned& a, RoleAssignmentSigned& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAssignmentSigned* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleAssignmentSigned* New() const final {
    return CreateMaybeMessage<RoleAssignmentSigned>(nullptr);
  }

  RoleAssignmentSigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleAssignmentSigned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleAssignmentSigned& from);
  void MergeFrom(const RoleAssignmentSigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAssignmentSigned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.RoleAssignmentSigned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kPublicKeyIdFieldNumber = 4,
    kEcryptedRskFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  void set_role_name(const std::string& value);
  void set_role_name(std::string&& value);
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  std::string* mutable_role_name();
  std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes public_key_id = 4;
  void clear_public_key_id();
  const std::string& public_key_id() const;
  void set_public_key_id(const std::string& value);
  void set_public_key_id(std::string&& value);
  void set_public_key_id(const char* value);
  void set_public_key_id(const void* value, size_t size);
  std::string* mutable_public_key_id();
  std::string* release_public_key_id();
  void set_allocated_public_key_id(std::string* public_key_id);
  private:
  const std::string& _internal_public_key_id() const;
  void _internal_set_public_key_id(const std::string& value);
  std::string* _internal_mutable_public_key_id();
  public:

  // bytes ecrypted_rsk = 5;
  void clear_ecrypted_rsk();
  const std::string& ecrypted_rsk() const;
  void set_ecrypted_rsk(const std::string& value);
  void set_ecrypted_rsk(std::string&& value);
  void set_ecrypted_rsk(const char* value);
  void set_ecrypted_rsk(const void* value, size_t size);
  std::string* mutable_ecrypted_rsk();
  std::string* release_ecrypted_rsk();
  void set_allocated_ecrypted_rsk(std::string* ecrypted_rsk);
  private:
  const std::string& _internal_ecrypted_rsk() const;
  void _internal_set_ecrypted_rsk(const std::string& value);
  std::string* _internal_mutable_ecrypted_rsk();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.RoleAssignmentSigned)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecrypted_rsk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class RoleAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.RoleAssignment) */ {
 public:
  RoleAssignment();
  virtual ~RoleAssignment();

  RoleAssignment(const RoleAssignment& from);
  RoleAssignment(RoleAssignment&& from) noexcept
    : RoleAssignment() {
    *this = ::std::move(from);
  }

  inline RoleAssignment& operator=(const RoleAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAssignment& operator=(RoleAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAssignment* internal_default_instance() {
    return reinterpret_cast<const RoleAssignment*>(
               &_RoleAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoleAssignment& a, RoleAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleAssignment* New() const final {
    return CreateMaybeMessage<RoleAssignment>(nullptr);
  }

  RoleAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleAssignment& from);
  void MergeFrom(const RoleAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.RoleAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fstorage_2eproto);
    return ::descriptor_table_purekitV3_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleAssignmentSignedFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes role_assignment_signed = 2;
  void clear_role_assignment_signed();
  const std::string& role_assignment_signed() const;
  void set_role_assignment_signed(const std::string& value);
  void set_role_assignment_signed(std::string&& value);
  void set_role_assignment_signed(const char* value);
  void set_role_assignment_signed(const void* value, size_t size);
  std::string* mutable_role_assignment_signed();
  std::string* release_role_assignment_signed();
  void set_allocated_role_assignment_signed(std::string* role_assignment_signed);
  private:
  const std::string& _internal_role_assignment_signed() const;
  void _internal_set_role_assignment_signed(const std::string& value);
  std::string* _internal_mutable_role_assignment_signed();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.RoleAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_assignment_signed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRecordSigned

// uint32 version = 1;
inline void UserRecordSigned::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecordSigned::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecordSigned::version() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.version)
  return _internal_version();
}
inline void UserRecordSigned::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void UserRecordSigned::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.version)
}

// string user_id = 2;
inline void UserRecordSigned::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::user_id() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.user_id)
  return _internal_user_id();
}
inline void UserRecordSigned::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.user_id)
}
inline std::string* UserRecordSigned::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserRecordSigned::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.user_id)
}
inline void UserRecordSigned::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.user_id)
}
inline void UserRecordSigned::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.user_id)
}
inline std::string* UserRecordSigned::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_user_id() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.user_id)
}

// bytes phe_record_ns = 3;
inline void UserRecordSigned::clear_phe_record_ns() {
  phe_record_ns_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::phe_record_ns() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.phe_record_ns)
  return _internal_phe_record_ns();
}
inline void UserRecordSigned::set_phe_record_ns(const std::string& value) {
  _internal_set_phe_record_ns(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.phe_record_ns)
}
inline std::string* UserRecordSigned::mutable_phe_record_ns() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.phe_record_ns)
  return _internal_mutable_phe_record_ns();
}
inline const std::string& UserRecordSigned::_internal_phe_record_ns() const {
  return phe_record_ns_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_phe_record_ns(const std::string& value) {
  
  phe_record_ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_phe_record_ns(std::string&& value) {
  
  phe_record_ns_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.phe_record_ns)
}
inline void UserRecordSigned::set_phe_record_ns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phe_record_ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.phe_record_ns)
}
inline void UserRecordSigned::set_phe_record_ns(const void* value, size_t size) {
  
  phe_record_ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.phe_record_ns)
}
inline std::string* UserRecordSigned::_internal_mutable_phe_record_ns() {
  
  return phe_record_ns_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_phe_record_ns() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.phe_record_ns)
  
  return phe_record_ns_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_phe_record_ns(std::string* phe_record_ns) {
  if (phe_record_ns != nullptr) {
    
  } else {
    
  }
  phe_record_ns_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phe_record_ns);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.phe_record_ns)
}

// bytes phe_record_nc = 4;
inline void UserRecordSigned::clear_phe_record_nc() {
  phe_record_nc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::phe_record_nc() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.phe_record_nc)
  return _internal_phe_record_nc();
}
inline void UserRecordSigned::set_phe_record_nc(const std::string& value) {
  _internal_set_phe_record_nc(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.phe_record_nc)
}
inline std::string* UserRecordSigned::mutable_phe_record_nc() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.phe_record_nc)
  return _internal_mutable_phe_record_nc();
}
inline const std::string& UserRecordSigned::_internal_phe_record_nc() const {
  return phe_record_nc_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_phe_record_nc(const std::string& value) {
  
  phe_record_nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_phe_record_nc(std::string&& value) {
  
  phe_record_nc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.phe_record_nc)
}
inline void UserRecordSigned::set_phe_record_nc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phe_record_nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.phe_record_nc)
}
inline void UserRecordSigned::set_phe_record_nc(const void* value, size_t size) {
  
  phe_record_nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.phe_record_nc)
}
inline std::string* UserRecordSigned::_internal_mutable_phe_record_nc() {
  
  return phe_record_nc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_phe_record_nc() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.phe_record_nc)
  
  return phe_record_nc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_phe_record_nc(std::string* phe_record_nc) {
  if (phe_record_nc != nullptr) {
    
  } else {
    
  }
  phe_record_nc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phe_record_nc);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.phe_record_nc)
}

// bytes upk = 5;
inline void UserRecordSigned::clear_upk() {
  upk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::upk() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.upk)
  return _internal_upk();
}
inline void UserRecordSigned::set_upk(const std::string& value) {
  _internal_set_upk(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.upk)
}
inline std::string* UserRecordSigned::mutable_upk() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.upk)
  return _internal_mutable_upk();
}
inline const std::string& UserRecordSigned::_internal_upk() const {
  return upk_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_upk(const std::string& value) {
  
  upk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_upk(std::string&& value) {
  
  upk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.upk)
}
inline void UserRecordSigned::set_upk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.upk)
}
inline void UserRecordSigned::set_upk(const void* value, size_t size) {
  
  upk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.upk)
}
inline std::string* UserRecordSigned::_internal_mutable_upk() {
  
  return upk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_upk() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.upk)
  
  return upk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_upk(std::string* upk) {
  if (upk != nullptr) {
    
  } else {
    
  }
  upk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upk);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.upk)
}

// bytes encrypted_usk = 6;
inline void UserRecordSigned::clear_encrypted_usk() {
  encrypted_usk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::encrypted_usk() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.encrypted_usk)
  return _internal_encrypted_usk();
}
inline void UserRecordSigned::set_encrypted_usk(const std::string& value) {
  _internal_set_encrypted_usk(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.encrypted_usk)
}
inline std::string* UserRecordSigned::mutable_encrypted_usk() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.encrypted_usk)
  return _internal_mutable_encrypted_usk();
}
inline const std::string& UserRecordSigned::_internal_encrypted_usk() const {
  return encrypted_usk_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_encrypted_usk(const std::string& value) {
  
  encrypted_usk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_encrypted_usk(std::string&& value) {
  
  encrypted_usk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.encrypted_usk)
}
inline void UserRecordSigned::set_encrypted_usk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_usk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.encrypted_usk)
}
inline void UserRecordSigned::set_encrypted_usk(const void* value, size_t size) {
  
  encrypted_usk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.encrypted_usk)
}
inline std::string* UserRecordSigned::_internal_mutable_encrypted_usk() {
  
  return encrypted_usk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_encrypted_usk() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.encrypted_usk)
  
  return encrypted_usk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_encrypted_usk(std::string* encrypted_usk) {
  if (encrypted_usk != nullptr) {
    
  } else {
    
  }
  encrypted_usk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_usk);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.encrypted_usk)
}

// bytes encrypted_usk_backup = 7;
inline void UserRecordSigned::clear_encrypted_usk_backup() {
  encrypted_usk_backup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::encrypted_usk_backup() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.encrypted_usk_backup)
  return _internal_encrypted_usk_backup();
}
inline void UserRecordSigned::set_encrypted_usk_backup(const std::string& value) {
  _internal_set_encrypted_usk_backup(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.encrypted_usk_backup)
}
inline std::string* UserRecordSigned::mutable_encrypted_usk_backup() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.encrypted_usk_backup)
  return _internal_mutable_encrypted_usk_backup();
}
inline const std::string& UserRecordSigned::_internal_encrypted_usk_backup() const {
  return encrypted_usk_backup_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_encrypted_usk_backup(const std::string& value) {
  
  encrypted_usk_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_encrypted_usk_backup(std::string&& value) {
  
  encrypted_usk_backup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.encrypted_usk_backup)
}
inline void UserRecordSigned::set_encrypted_usk_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_usk_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.encrypted_usk_backup)
}
inline void UserRecordSigned::set_encrypted_usk_backup(const void* value, size_t size) {
  
  encrypted_usk_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.encrypted_usk_backup)
}
inline std::string* UserRecordSigned::_internal_mutable_encrypted_usk_backup() {
  
  return encrypted_usk_backup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_encrypted_usk_backup() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.encrypted_usk_backup)
  
  return encrypted_usk_backup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_encrypted_usk_backup(std::string* encrypted_usk_backup) {
  if (encrypted_usk_backup != nullptr) {
    
  } else {
    
  }
  encrypted_usk_backup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_usk_backup);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.encrypted_usk_backup)
}

// bytes encrypted_pwd_hash = 8;
inline void UserRecordSigned::clear_encrypted_pwd_hash() {
  encrypted_pwd_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecordSigned::encrypted_pwd_hash() const {
  // @@protoc_insertion_point(field_get:build.UserRecordSigned.encrypted_pwd_hash)
  return _internal_encrypted_pwd_hash();
}
inline void UserRecordSigned::set_encrypted_pwd_hash(const std::string& value) {
  _internal_set_encrypted_pwd_hash(value);
  // @@protoc_insertion_point(field_set:build.UserRecordSigned.encrypted_pwd_hash)
}
inline std::string* UserRecordSigned::mutable_encrypted_pwd_hash() {
  // @@protoc_insertion_point(field_mutable:build.UserRecordSigned.encrypted_pwd_hash)
  return _internal_mutable_encrypted_pwd_hash();
}
inline const std::string& UserRecordSigned::_internal_encrypted_pwd_hash() const {
  return encrypted_pwd_hash_.GetNoArena();
}
inline void UserRecordSigned::_internal_set_encrypted_pwd_hash(const std::string& value) {
  
  encrypted_pwd_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecordSigned::set_encrypted_pwd_hash(std::string&& value) {
  
  encrypted_pwd_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecordSigned.encrypted_pwd_hash)
}
inline void UserRecordSigned::set_encrypted_pwd_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_pwd_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecordSigned.encrypted_pwd_hash)
}
inline void UserRecordSigned::set_encrypted_pwd_hash(const void* value, size_t size) {
  
  encrypted_pwd_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecordSigned.encrypted_pwd_hash)
}
inline std::string* UserRecordSigned::_internal_mutable_encrypted_pwd_hash() {
  
  return encrypted_pwd_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecordSigned::release_encrypted_pwd_hash() {
  // @@protoc_insertion_point(field_release:build.UserRecordSigned.encrypted_pwd_hash)
  
  return encrypted_pwd_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecordSigned::set_allocated_encrypted_pwd_hash(std::string* encrypted_pwd_hash) {
  if (encrypted_pwd_hash != nullptr) {
    
  } else {
    
  }
  encrypted_pwd_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_pwd_hash);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecordSigned.encrypted_pwd_hash)
}

// -------------------------------------------------------------------

// UserRecord

// uint32 version = 1;
inline void UserRecord::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecord::version() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.version)
  return _internal_version();
}
inline void UserRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void UserRecord::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.version)
}

// bytes user_record_signed = 2;
inline void UserRecord::clear_user_record_signed() {
  user_record_signed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecord::user_record_signed() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.user_record_signed)
  return _internal_user_record_signed();
}
inline void UserRecord::set_user_record_signed(const std::string& value) {
  _internal_set_user_record_signed(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.user_record_signed)
}
inline std::string* UserRecord::mutable_user_record_signed() {
  // @@protoc_insertion_point(field_mutable:build.UserRecord.user_record_signed)
  return _internal_mutable_user_record_signed();
}
inline const std::string& UserRecord::_internal_user_record_signed() const {
  return user_record_signed_.GetNoArena();
}
inline void UserRecord::_internal_set_user_record_signed(const std::string& value) {
  
  user_record_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecord::set_user_record_signed(std::string&& value) {
  
  user_record_signed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecord.user_record_signed)
}
inline void UserRecord::set_user_record_signed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_record_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecord.user_record_signed)
}
inline void UserRecord::set_user_record_signed(const void* value, size_t size) {
  
  user_record_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecord.user_record_signed)
}
inline std::string* UserRecord::_internal_mutable_user_record_signed() {
  
  return user_record_signed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecord::release_user_record_signed() {
  // @@protoc_insertion_point(field_release:build.UserRecord.user_record_signed)
  
  return user_record_signed_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecord::set_allocated_user_record_signed(std::string* user_record_signed) {
  if (user_record_signed != nullptr) {
    
  } else {
    
  }
  user_record_signed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_record_signed);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecord.user_record_signed)
}

// bytes signature = 3;
inline void UserRecord::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecord::signature() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.signature)
  return _internal_signature();
}
inline void UserRecord::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.signature)
}
inline std::string* UserRecord::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:build.UserRecord.signature)
  return _internal_mutable_signature();
}
inline const std::string& UserRecord::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void UserRecord::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecord::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecord.signature)
}
inline void UserRecord::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecord.signature)
}
inline void UserRecord::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecord.signature)
}
inline std::string* UserRecord::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecord::release_signature() {
  // @@protoc_insertion_point(field_release:build.UserRecord.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecord::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecord.signature)
}

// bytes phe_record_t0 = 4;
inline void UserRecord::clear_phe_record_t0() {
  phe_record_t0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecord::phe_record_t0() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.phe_record_t0)
  return _internal_phe_record_t0();
}
inline void UserRecord::set_phe_record_t0(const std::string& value) {
  _internal_set_phe_record_t0(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.phe_record_t0)
}
inline std::string* UserRecord::mutable_phe_record_t0() {
  // @@protoc_insertion_point(field_mutable:build.UserRecord.phe_record_t0)
  return _internal_mutable_phe_record_t0();
}
inline const std::string& UserRecord::_internal_phe_record_t0() const {
  return phe_record_t0_.GetNoArena();
}
inline void UserRecord::_internal_set_phe_record_t0(const std::string& value) {
  
  phe_record_t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecord::set_phe_record_t0(std::string&& value) {
  
  phe_record_t0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecord.phe_record_t0)
}
inline void UserRecord::set_phe_record_t0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phe_record_t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecord.phe_record_t0)
}
inline void UserRecord::set_phe_record_t0(const void* value, size_t size) {
  
  phe_record_t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecord.phe_record_t0)
}
inline std::string* UserRecord::_internal_mutable_phe_record_t0() {
  
  return phe_record_t0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecord::release_phe_record_t0() {
  // @@protoc_insertion_point(field_release:build.UserRecord.phe_record_t0)
  
  return phe_record_t0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecord::set_allocated_phe_record_t0(std::string* phe_record_t0) {
  if (phe_record_t0 != nullptr) {
    
  } else {
    
  }
  phe_record_t0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phe_record_t0);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecord.phe_record_t0)
}

// bytes phe_record_t1 = 5;
inline void UserRecord::clear_phe_record_t1() {
  phe_record_t1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserRecord::phe_record_t1() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.phe_record_t1)
  return _internal_phe_record_t1();
}
inline void UserRecord::set_phe_record_t1(const std::string& value) {
  _internal_set_phe_record_t1(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.phe_record_t1)
}
inline std::string* UserRecord::mutable_phe_record_t1() {
  // @@protoc_insertion_point(field_mutable:build.UserRecord.phe_record_t1)
  return _internal_mutable_phe_record_t1();
}
inline const std::string& UserRecord::_internal_phe_record_t1() const {
  return phe_record_t1_.GetNoArena();
}
inline void UserRecord::_internal_set_phe_record_t1(const std::string& value) {
  
  phe_record_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserRecord::set_phe_record_t1(std::string&& value) {
  
  phe_record_t1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.UserRecord.phe_record_t1)
}
inline void UserRecord::set_phe_record_t1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phe_record_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.UserRecord.phe_record_t1)
}
inline void UserRecord::set_phe_record_t1(const void* value, size_t size) {
  
  phe_record_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.UserRecord.phe_record_t1)
}
inline std::string* UserRecord::_internal_mutable_phe_record_t1() {
  
  return phe_record_t1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserRecord::release_phe_record_t1() {
  // @@protoc_insertion_point(field_release:build.UserRecord.phe_record_t1)
  
  return phe_record_t1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserRecord::set_allocated_phe_record_t1(std::string* phe_record_t1) {
  if (phe_record_t1 != nullptr) {
    
  } else {
    
  }
  phe_record_t1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phe_record_t1);
  // @@protoc_insertion_point(field_set_allocated:build.UserRecord.phe_record_t1)
}

// uint32 phe_record_version = 6;
inline void UserRecord::clear_phe_record_version() {
  phe_record_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecord::_internal_phe_record_version() const {
  return phe_record_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserRecord::phe_record_version() const {
  // @@protoc_insertion_point(field_get:build.UserRecord.phe_record_version)
  return _internal_phe_record_version();
}
inline void UserRecord::_internal_set_phe_record_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phe_record_version_ = value;
}
inline void UserRecord::set_phe_record_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phe_record_version(value);
  // @@protoc_insertion_point(field_set:build.UserRecord.phe_record_version)
}

// -------------------------------------------------------------------

// UserRecords

// repeated .build.UserRecord user_records = 1;
inline int UserRecords::_internal_user_records_size() const {
  return user_records_.size();
}
inline int UserRecords::user_records_size() const {
  return _internal_user_records_size();
}
inline void UserRecords::clear_user_records() {
  user_records_.Clear();
}
inline ::build::UserRecord* UserRecords::mutable_user_records(int index) {
  // @@protoc_insertion_point(field_mutable:build.UserRecords.user_records)
  return user_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::UserRecord >*
UserRecords::mutable_user_records() {
  // @@protoc_insertion_point(field_mutable_list:build.UserRecords.user_records)
  return &user_records_;
}
inline const ::build::UserRecord& UserRecords::_internal_user_records(int index) const {
  return user_records_.Get(index);
}
inline const ::build::UserRecord& UserRecords::user_records(int index) const {
  // @@protoc_insertion_point(field_get:build.UserRecords.user_records)
  return _internal_user_records(index);
}
inline ::build::UserRecord* UserRecords::_internal_add_user_records() {
  return user_records_.Add();
}
inline ::build::UserRecord* UserRecords::add_user_records() {
  // @@protoc_insertion_point(field_add:build.UserRecords.user_records)
  return _internal_add_user_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::UserRecord >&
UserRecords::user_records() const {
  // @@protoc_insertion_point(field_list:build.UserRecords.user_records)
  return user_records_;
}

// -------------------------------------------------------------------

// CellKeySigned

// uint32 version = 1;
inline void CellKeySigned::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellKeySigned::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellKeySigned::version() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.version)
  return _internal_version();
}
inline void CellKeySigned::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CellKeySigned::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.version)
}

// string userId = 2;
inline void CellKeySigned::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKeySigned::userid() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.userId)
  return _internal_userid();
}
inline void CellKeySigned::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.userId)
}
inline std::string* CellKeySigned::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:build.CellKeySigned.userId)
  return _internal_mutable_userid();
}
inline const std::string& CellKeySigned::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void CellKeySigned::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKeySigned::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKeySigned.userId)
}
inline void CellKeySigned::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKeySigned.userId)
}
inline void CellKeySigned::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKeySigned.userId)
}
inline std::string* CellKeySigned::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKeySigned::release_userid() {
  // @@protoc_insertion_point(field_release:build.CellKeySigned.userId)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKeySigned::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:build.CellKeySigned.userId)
}

// string dataId = 3;
inline void CellKeySigned::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKeySigned::dataid() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.dataId)
  return _internal_dataid();
}
inline void CellKeySigned::set_dataid(const std::string& value) {
  _internal_set_dataid(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.dataId)
}
inline std::string* CellKeySigned::mutable_dataid() {
  // @@protoc_insertion_point(field_mutable:build.CellKeySigned.dataId)
  return _internal_mutable_dataid();
}
inline const std::string& CellKeySigned::_internal_dataid() const {
  return dataid_.GetNoArena();
}
inline void CellKeySigned::_internal_set_dataid(const std::string& value) {
  
  dataid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKeySigned::set_dataid(std::string&& value) {
  
  dataid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKeySigned.dataId)
}
inline void CellKeySigned::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKeySigned.dataId)
}
inline void CellKeySigned::set_dataid(const char* value, size_t size) {
  
  dataid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKeySigned.dataId)
}
inline std::string* CellKeySigned::_internal_mutable_dataid() {
  
  return dataid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKeySigned::release_dataid() {
  // @@protoc_insertion_point(field_release:build.CellKeySigned.dataId)
  
  return dataid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKeySigned::set_allocated_dataid(std::string* dataid) {
  if (dataid != nullptr) {
    
  } else {
    
  }
  dataid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:build.CellKeySigned.dataId)
}

// bytes cpk = 4;
inline void CellKeySigned::clear_cpk() {
  cpk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKeySigned::cpk() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.cpk)
  return _internal_cpk();
}
inline void CellKeySigned::set_cpk(const std::string& value) {
  _internal_set_cpk(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.cpk)
}
inline std::string* CellKeySigned::mutable_cpk() {
  // @@protoc_insertion_point(field_mutable:build.CellKeySigned.cpk)
  return _internal_mutable_cpk();
}
inline const std::string& CellKeySigned::_internal_cpk() const {
  return cpk_.GetNoArena();
}
inline void CellKeySigned::_internal_set_cpk(const std::string& value) {
  
  cpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKeySigned::set_cpk(std::string&& value) {
  
  cpk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKeySigned.cpk)
}
inline void CellKeySigned::set_cpk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKeySigned.cpk)
}
inline void CellKeySigned::set_cpk(const void* value, size_t size) {
  
  cpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKeySigned.cpk)
}
inline std::string* CellKeySigned::_internal_mutable_cpk() {
  
  return cpk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKeySigned::release_cpk() {
  // @@protoc_insertion_point(field_release:build.CellKeySigned.cpk)
  
  return cpk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKeySigned::set_allocated_cpk(std::string* cpk) {
  if (cpk != nullptr) {
    
  } else {
    
  }
  cpk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpk);
  // @@protoc_insertion_point(field_set_allocated:build.CellKeySigned.cpk)
}

// bytes encrypted_csk_cms = 5;
inline void CellKeySigned::clear_encrypted_csk_cms() {
  encrypted_csk_cms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKeySigned::encrypted_csk_cms() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.encrypted_csk_cms)
  return _internal_encrypted_csk_cms();
}
inline void CellKeySigned::set_encrypted_csk_cms(const std::string& value) {
  _internal_set_encrypted_csk_cms(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.encrypted_csk_cms)
}
inline std::string* CellKeySigned::mutable_encrypted_csk_cms() {
  // @@protoc_insertion_point(field_mutable:build.CellKeySigned.encrypted_csk_cms)
  return _internal_mutable_encrypted_csk_cms();
}
inline const std::string& CellKeySigned::_internal_encrypted_csk_cms() const {
  return encrypted_csk_cms_.GetNoArena();
}
inline void CellKeySigned::_internal_set_encrypted_csk_cms(const std::string& value) {
  
  encrypted_csk_cms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKeySigned::set_encrypted_csk_cms(std::string&& value) {
  
  encrypted_csk_cms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKeySigned.encrypted_csk_cms)
}
inline void CellKeySigned::set_encrypted_csk_cms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_csk_cms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKeySigned.encrypted_csk_cms)
}
inline void CellKeySigned::set_encrypted_csk_cms(const void* value, size_t size) {
  
  encrypted_csk_cms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKeySigned.encrypted_csk_cms)
}
inline std::string* CellKeySigned::_internal_mutable_encrypted_csk_cms() {
  
  return encrypted_csk_cms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKeySigned::release_encrypted_csk_cms() {
  // @@protoc_insertion_point(field_release:build.CellKeySigned.encrypted_csk_cms)
  
  return encrypted_csk_cms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKeySigned::set_allocated_encrypted_csk_cms(std::string* encrypted_csk_cms) {
  if (encrypted_csk_cms != nullptr) {
    
  } else {
    
  }
  encrypted_csk_cms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_csk_cms);
  // @@protoc_insertion_point(field_set_allocated:build.CellKeySigned.encrypted_csk_cms)
}

// bytes encrypted_csk_body = 6;
inline void CellKeySigned::clear_encrypted_csk_body() {
  encrypted_csk_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKeySigned::encrypted_csk_body() const {
  // @@protoc_insertion_point(field_get:build.CellKeySigned.encrypted_csk_body)
  return _internal_encrypted_csk_body();
}
inline void CellKeySigned::set_encrypted_csk_body(const std::string& value) {
  _internal_set_encrypted_csk_body(value);
  // @@protoc_insertion_point(field_set:build.CellKeySigned.encrypted_csk_body)
}
inline std::string* CellKeySigned::mutable_encrypted_csk_body() {
  // @@protoc_insertion_point(field_mutable:build.CellKeySigned.encrypted_csk_body)
  return _internal_mutable_encrypted_csk_body();
}
inline const std::string& CellKeySigned::_internal_encrypted_csk_body() const {
  return encrypted_csk_body_.GetNoArena();
}
inline void CellKeySigned::_internal_set_encrypted_csk_body(const std::string& value) {
  
  encrypted_csk_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKeySigned::set_encrypted_csk_body(std::string&& value) {
  
  encrypted_csk_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKeySigned.encrypted_csk_body)
}
inline void CellKeySigned::set_encrypted_csk_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_csk_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKeySigned.encrypted_csk_body)
}
inline void CellKeySigned::set_encrypted_csk_body(const void* value, size_t size) {
  
  encrypted_csk_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKeySigned.encrypted_csk_body)
}
inline std::string* CellKeySigned::_internal_mutable_encrypted_csk_body() {
  
  return encrypted_csk_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKeySigned::release_encrypted_csk_body() {
  // @@protoc_insertion_point(field_release:build.CellKeySigned.encrypted_csk_body)
  
  return encrypted_csk_body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKeySigned::set_allocated_encrypted_csk_body(std::string* encrypted_csk_body) {
  if (encrypted_csk_body != nullptr) {
    
  } else {
    
  }
  encrypted_csk_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_csk_body);
  // @@protoc_insertion_point(field_set_allocated:build.CellKeySigned.encrypted_csk_body)
}

// -------------------------------------------------------------------

// CellKey

// uint32 version = 1;
inline void CellKey::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellKey::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellKey::version() const {
  // @@protoc_insertion_point(field_get:build.CellKey.version)
  return _internal_version();
}
inline void CellKey::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CellKey::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.CellKey.version)
}

// bytes cell_key_signed = 2;
inline void CellKey::clear_cell_key_signed() {
  cell_key_signed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKey::cell_key_signed() const {
  // @@protoc_insertion_point(field_get:build.CellKey.cell_key_signed)
  return _internal_cell_key_signed();
}
inline void CellKey::set_cell_key_signed(const std::string& value) {
  _internal_set_cell_key_signed(value);
  // @@protoc_insertion_point(field_set:build.CellKey.cell_key_signed)
}
inline std::string* CellKey::mutable_cell_key_signed() {
  // @@protoc_insertion_point(field_mutable:build.CellKey.cell_key_signed)
  return _internal_mutable_cell_key_signed();
}
inline const std::string& CellKey::_internal_cell_key_signed() const {
  return cell_key_signed_.GetNoArena();
}
inline void CellKey::_internal_set_cell_key_signed(const std::string& value) {
  
  cell_key_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKey::set_cell_key_signed(std::string&& value) {
  
  cell_key_signed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKey.cell_key_signed)
}
inline void CellKey::set_cell_key_signed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cell_key_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKey.cell_key_signed)
}
inline void CellKey::set_cell_key_signed(const void* value, size_t size) {
  
  cell_key_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKey.cell_key_signed)
}
inline std::string* CellKey::_internal_mutable_cell_key_signed() {
  
  return cell_key_signed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKey::release_cell_key_signed() {
  // @@protoc_insertion_point(field_release:build.CellKey.cell_key_signed)
  
  return cell_key_signed_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKey::set_allocated_cell_key_signed(std::string* cell_key_signed) {
  if (cell_key_signed != nullptr) {
    
  } else {
    
  }
  cell_key_signed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_key_signed);
  // @@protoc_insertion_point(field_set_allocated:build.CellKey.cell_key_signed)
}

// bytes signature = 3;
inline void CellKey::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellKey::signature() const {
  // @@protoc_insertion_point(field_get:build.CellKey.signature)
  return _internal_signature();
}
inline void CellKey::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:build.CellKey.signature)
}
inline std::string* CellKey::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:build.CellKey.signature)
  return _internal_mutable_signature();
}
inline const std::string& CellKey::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void CellKey::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CellKey::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.CellKey.signature)
}
inline void CellKey::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.CellKey.signature)
}
inline void CellKey::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.CellKey.signature)
}
inline std::string* CellKey::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellKey::release_signature() {
  // @@protoc_insertion_point(field_release:build.CellKey.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellKey::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:build.CellKey.signature)
}

// -------------------------------------------------------------------

// RoleSigned

// uint32 version = 1;
inline void RoleSigned::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleSigned::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleSigned::version() const {
  // @@protoc_insertion_point(field_get:build.RoleSigned.version)
  return _internal_version();
}
inline void RoleSigned::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void RoleSigned::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.RoleSigned.version)
}

// string name = 2;
inline void RoleSigned::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleSigned::name() const {
  // @@protoc_insertion_point(field_get:build.RoleSigned.name)
  return _internal_name();
}
inline void RoleSigned::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.RoleSigned.name)
}
inline std::string* RoleSigned::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.RoleSigned.name)
  return _internal_mutable_name();
}
inline const std::string& RoleSigned::_internal_name() const {
  return name_.GetNoArena();
}
inline void RoleSigned::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleSigned::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleSigned.name)
}
inline void RoleSigned::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleSigned.name)
}
inline void RoleSigned::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleSigned.name)
}
inline std::string* RoleSigned::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleSigned::release_name() {
  // @@protoc_insertion_point(field_release:build.RoleSigned.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleSigned::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:build.RoleSigned.name)
}

// bytes rpk = 3;
inline void RoleSigned::clear_rpk() {
  rpk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleSigned::rpk() const {
  // @@protoc_insertion_point(field_get:build.RoleSigned.rpk)
  return _internal_rpk();
}
inline void RoleSigned::set_rpk(const std::string& value) {
  _internal_set_rpk(value);
  // @@protoc_insertion_point(field_set:build.RoleSigned.rpk)
}
inline std::string* RoleSigned::mutable_rpk() {
  // @@protoc_insertion_point(field_mutable:build.RoleSigned.rpk)
  return _internal_mutable_rpk();
}
inline const std::string& RoleSigned::_internal_rpk() const {
  return rpk_.GetNoArena();
}
inline void RoleSigned::_internal_set_rpk(const std::string& value) {
  
  rpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleSigned::set_rpk(std::string&& value) {
  
  rpk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleSigned.rpk)
}
inline void RoleSigned::set_rpk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleSigned.rpk)
}
inline void RoleSigned::set_rpk(const void* value, size_t size) {
  
  rpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleSigned.rpk)
}
inline std::string* RoleSigned::_internal_mutable_rpk() {
  
  return rpk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleSigned::release_rpk() {
  // @@protoc_insertion_point(field_release:build.RoleSigned.rpk)
  
  return rpk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleSigned::set_allocated_rpk(std::string* rpk) {
  if (rpk != nullptr) {
    
  } else {
    
  }
  rpk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpk);
  // @@protoc_insertion_point(field_set_allocated:build.RoleSigned.rpk)
}

// -------------------------------------------------------------------

// Role

// uint32 version = 1;
inline void Role::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Role::version() const {
  // @@protoc_insertion_point(field_get:build.Role.version)
  return _internal_version();
}
inline void Role::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Role::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.Role.version)
}

// bytes role_signed = 2;
inline void Role::clear_role_signed() {
  role_signed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::role_signed() const {
  // @@protoc_insertion_point(field_get:build.Role.role_signed)
  return _internal_role_signed();
}
inline void Role::set_role_signed(const std::string& value) {
  _internal_set_role_signed(value);
  // @@protoc_insertion_point(field_set:build.Role.role_signed)
}
inline std::string* Role::mutable_role_signed() {
  // @@protoc_insertion_point(field_mutable:build.Role.role_signed)
  return _internal_mutable_role_signed();
}
inline const std::string& Role::_internal_role_signed() const {
  return role_signed_.GetNoArena();
}
inline void Role::_internal_set_role_signed(const std::string& value) {
  
  role_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_role_signed(std::string&& value) {
  
  role_signed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.Role.role_signed)
}
inline void Role::set_role_signed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.Role.role_signed)
}
inline void Role::set_role_signed(const void* value, size_t size) {
  
  role_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.Role.role_signed)
}
inline std::string* Role::_internal_mutable_role_signed() {
  
  return role_signed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_role_signed() {
  // @@protoc_insertion_point(field_release:build.Role.role_signed)
  
  return role_signed_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_role_signed(std::string* role_signed) {
  if (role_signed != nullptr) {
    
  } else {
    
  }
  role_signed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_signed);
  // @@protoc_insertion_point(field_set_allocated:build.Role.role_signed)
}

// bytes signature = 3;
inline void Role::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::signature() const {
  // @@protoc_insertion_point(field_get:build.Role.signature)
  return _internal_signature();
}
inline void Role::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:build.Role.signature)
}
inline std::string* Role::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:build.Role.signature)
  return _internal_mutable_signature();
}
inline const std::string& Role::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void Role::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Role::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.Role.signature)
}
inline void Role::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.Role.signature)
}
inline void Role::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.Role.signature)
}
inline std::string* Role::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_signature() {
  // @@protoc_insertion_point(field_release:build.Role.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:build.Role.signature)
}

// -------------------------------------------------------------------

// RoleAssignmentSigned

// uint32 version = 1;
inline void RoleAssignmentSigned::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignmentSigned::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignmentSigned::version() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignmentSigned.version)
  return _internal_version();
}
inline void RoleAssignmentSigned::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void RoleAssignmentSigned::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignmentSigned.version)
}

// string role_name = 2;
inline void RoleAssignmentSigned::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignmentSigned::role_name() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignmentSigned.role_name)
  return _internal_role_name();
}
inline void RoleAssignmentSigned::set_role_name(const std::string& value) {
  _internal_set_role_name(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignmentSigned.role_name)
}
inline std::string* RoleAssignmentSigned::mutable_role_name() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignmentSigned.role_name)
  return _internal_mutable_role_name();
}
inline const std::string& RoleAssignmentSigned::_internal_role_name() const {
  return role_name_.GetNoArena();
}
inline void RoleAssignmentSigned::_internal_set_role_name(const std::string& value) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignmentSigned::set_role_name(std::string&& value) {
  
  role_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignmentSigned.role_name)
}
inline void RoleAssignmentSigned::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignmentSigned.role_name)
}
inline void RoleAssignmentSigned::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignmentSigned.role_name)
}
inline std::string* RoleAssignmentSigned::_internal_mutable_role_name() {
  
  return role_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignmentSigned::release_role_name() {
  // @@protoc_insertion_point(field_release:build.RoleAssignmentSigned.role_name)
  
  return role_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignmentSigned::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignmentSigned.role_name)
}

// string user_id = 3;
inline void RoleAssignmentSigned::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignmentSigned::user_id() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignmentSigned.user_id)
  return _internal_user_id();
}
inline void RoleAssignmentSigned::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignmentSigned.user_id)
}
inline std::string* RoleAssignmentSigned::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignmentSigned.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& RoleAssignmentSigned::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void RoleAssignmentSigned::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignmentSigned::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignmentSigned.user_id)
}
inline void RoleAssignmentSigned::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignmentSigned.user_id)
}
inline void RoleAssignmentSigned::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignmentSigned.user_id)
}
inline std::string* RoleAssignmentSigned::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignmentSigned::release_user_id() {
  // @@protoc_insertion_point(field_release:build.RoleAssignmentSigned.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignmentSigned::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignmentSigned.user_id)
}

// bytes public_key_id = 4;
inline void RoleAssignmentSigned::clear_public_key_id() {
  public_key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignmentSigned::public_key_id() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignmentSigned.public_key_id)
  return _internal_public_key_id();
}
inline void RoleAssignmentSigned::set_public_key_id(const std::string& value) {
  _internal_set_public_key_id(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignmentSigned.public_key_id)
}
inline std::string* RoleAssignmentSigned::mutable_public_key_id() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignmentSigned.public_key_id)
  return _internal_mutable_public_key_id();
}
inline const std::string& RoleAssignmentSigned::_internal_public_key_id() const {
  return public_key_id_.GetNoArena();
}
inline void RoleAssignmentSigned::_internal_set_public_key_id(const std::string& value) {
  
  public_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignmentSigned::set_public_key_id(std::string&& value) {
  
  public_key_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignmentSigned.public_key_id)
}
inline void RoleAssignmentSigned::set_public_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignmentSigned.public_key_id)
}
inline void RoleAssignmentSigned::set_public_key_id(const void* value, size_t size) {
  
  public_key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignmentSigned.public_key_id)
}
inline std::string* RoleAssignmentSigned::_internal_mutable_public_key_id() {
  
  return public_key_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignmentSigned::release_public_key_id() {
  // @@protoc_insertion_point(field_release:build.RoleAssignmentSigned.public_key_id)
  
  return public_key_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignmentSigned::set_allocated_public_key_id(std::string* public_key_id) {
  if (public_key_id != nullptr) {
    
  } else {
    
  }
  public_key_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_id);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignmentSigned.public_key_id)
}

// bytes ecrypted_rsk = 5;
inline void RoleAssignmentSigned::clear_ecrypted_rsk() {
  ecrypted_rsk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignmentSigned::ecrypted_rsk() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignmentSigned.ecrypted_rsk)
  return _internal_ecrypted_rsk();
}
inline void RoleAssignmentSigned::set_ecrypted_rsk(const std::string& value) {
  _internal_set_ecrypted_rsk(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignmentSigned.ecrypted_rsk)
}
inline std::string* RoleAssignmentSigned::mutable_ecrypted_rsk() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignmentSigned.ecrypted_rsk)
  return _internal_mutable_ecrypted_rsk();
}
inline const std::string& RoleAssignmentSigned::_internal_ecrypted_rsk() const {
  return ecrypted_rsk_.GetNoArena();
}
inline void RoleAssignmentSigned::_internal_set_ecrypted_rsk(const std::string& value) {
  
  ecrypted_rsk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignmentSigned::set_ecrypted_rsk(std::string&& value) {
  
  ecrypted_rsk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignmentSigned.ecrypted_rsk)
}
inline void RoleAssignmentSigned::set_ecrypted_rsk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecrypted_rsk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignmentSigned.ecrypted_rsk)
}
inline void RoleAssignmentSigned::set_ecrypted_rsk(const void* value, size_t size) {
  
  ecrypted_rsk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignmentSigned.ecrypted_rsk)
}
inline std::string* RoleAssignmentSigned::_internal_mutable_ecrypted_rsk() {
  
  return ecrypted_rsk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignmentSigned::release_ecrypted_rsk() {
  // @@protoc_insertion_point(field_release:build.RoleAssignmentSigned.ecrypted_rsk)
  
  return ecrypted_rsk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignmentSigned::set_allocated_ecrypted_rsk(std::string* ecrypted_rsk) {
  if (ecrypted_rsk != nullptr) {
    
  } else {
    
  }
  ecrypted_rsk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecrypted_rsk);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignmentSigned.ecrypted_rsk)
}

// -------------------------------------------------------------------

// RoleAssignment

// uint32 version = 1;
inline void RoleAssignment::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignment::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleAssignment::version() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignment.version)
  return _internal_version();
}
inline void RoleAssignment::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void RoleAssignment::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignment.version)
}

// bytes role_assignment_signed = 2;
inline void RoleAssignment::clear_role_assignment_signed() {
  role_assignment_signed_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignment::role_assignment_signed() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignment.role_assignment_signed)
  return _internal_role_assignment_signed();
}
inline void RoleAssignment::set_role_assignment_signed(const std::string& value) {
  _internal_set_role_assignment_signed(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignment.role_assignment_signed)
}
inline std::string* RoleAssignment::mutable_role_assignment_signed() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignment.role_assignment_signed)
  return _internal_mutable_role_assignment_signed();
}
inline const std::string& RoleAssignment::_internal_role_assignment_signed() const {
  return role_assignment_signed_.GetNoArena();
}
inline void RoleAssignment::_internal_set_role_assignment_signed(const std::string& value) {
  
  role_assignment_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignment::set_role_assignment_signed(std::string&& value) {
  
  role_assignment_signed_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignment.role_assignment_signed)
}
inline void RoleAssignment::set_role_assignment_signed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_assignment_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignment.role_assignment_signed)
}
inline void RoleAssignment::set_role_assignment_signed(const void* value, size_t size) {
  
  role_assignment_signed_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignment.role_assignment_signed)
}
inline std::string* RoleAssignment::_internal_mutable_role_assignment_signed() {
  
  return role_assignment_signed_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignment::release_role_assignment_signed() {
  // @@protoc_insertion_point(field_release:build.RoleAssignment.role_assignment_signed)
  
  return role_assignment_signed_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignment::set_allocated_role_assignment_signed(std::string* role_assignment_signed) {
  if (role_assignment_signed != nullptr) {
    
  } else {
    
  }
  role_assignment_signed_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_assignment_signed);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignment.role_assignment_signed)
}

// bytes signature = 3;
inline void RoleAssignment::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoleAssignment::signature() const {
  // @@protoc_insertion_point(field_get:build.RoleAssignment.signature)
  return _internal_signature();
}
inline void RoleAssignment::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:build.RoleAssignment.signature)
}
inline std::string* RoleAssignment::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:build.RoleAssignment.signature)
  return _internal_mutable_signature();
}
inline const std::string& RoleAssignment::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void RoleAssignment::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RoleAssignment::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.RoleAssignment.signature)
}
inline void RoleAssignment::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.RoleAssignment.signature)
}
inline void RoleAssignment::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.RoleAssignment.signature)
}
inline std::string* RoleAssignment::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAssignment::release_signature() {
  // @@protoc_insertion_point(field_release:build.RoleAssignment.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAssignment::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:build.RoleAssignment.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace build

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fstorage_2eproto
