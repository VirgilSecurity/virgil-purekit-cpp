// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: purekit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_purekit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_purekit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_purekit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_purekit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_purekit_2eproto;
namespace build {
class DatabaseRecord;
class DatabaseRecordDefaultTypeInternal;
extern DatabaseRecordDefaultTypeInternal _DatabaseRecord_default_instance_;
class EnrollmentRequest;
class EnrollmentRequestDefaultTypeInternal;
extern EnrollmentRequestDefaultTypeInternal _EnrollmentRequest_default_instance_;
class EnrollmentResponse;
class EnrollmentResponseDefaultTypeInternal;
extern EnrollmentResponseDefaultTypeInternal _EnrollmentResponse_default_instance_;
class HttpError;
class HttpErrorDefaultTypeInternal;
extern HttpErrorDefaultTypeInternal _HttpError_default_instance_;
class VerifyPasswordRequest;
class VerifyPasswordRequestDefaultTypeInternal;
extern VerifyPasswordRequestDefaultTypeInternal _VerifyPasswordRequest_default_instance_;
class VerifyPasswordResponse;
class VerifyPasswordResponseDefaultTypeInternal;
extern VerifyPasswordResponseDefaultTypeInternal _VerifyPasswordResponse_default_instance_;
class VersionedUpdateToken;
class VersionedUpdateTokenDefaultTypeInternal;
extern VersionedUpdateTokenDefaultTypeInternal _VersionedUpdateToken_default_instance_;
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::DatabaseRecord* Arena::CreateMaybeMessage<::build::DatabaseRecord>(Arena*);
template<> ::build::EnrollmentRequest* Arena::CreateMaybeMessage<::build::EnrollmentRequest>(Arena*);
template<> ::build::EnrollmentResponse* Arena::CreateMaybeMessage<::build::EnrollmentResponse>(Arena*);
template<> ::build::HttpError* Arena::CreateMaybeMessage<::build::HttpError>(Arena*);
template<> ::build::VerifyPasswordRequest* Arena::CreateMaybeMessage<::build::VerifyPasswordRequest>(Arena*);
template<> ::build::VerifyPasswordResponse* Arena::CreateMaybeMessage<::build::VerifyPasswordResponse>(Arena*);
template<> ::build::VersionedUpdateToken* Arena::CreateMaybeMessage<::build::VersionedUpdateToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {

// ===================================================================

class DatabaseRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.DatabaseRecord) */ {
 public:
  DatabaseRecord();
  virtual ~DatabaseRecord();

  DatabaseRecord(const DatabaseRecord& from);
  DatabaseRecord(DatabaseRecord&& from) noexcept
    : DatabaseRecord() {
    *this = ::std::move(from);
  }

  inline DatabaseRecord& operator=(const DatabaseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseRecord& operator=(DatabaseRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatabaseRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseRecord* internal_default_instance() {
    return reinterpret_cast<const DatabaseRecord*>(
               &_DatabaseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatabaseRecord& a, DatabaseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseRecord* New() const final {
    return CreateMaybeMessage<DatabaseRecord>(nullptr);
  }

  DatabaseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatabaseRecord& from);
  void MergeFrom(const DatabaseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.DatabaseRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes record = 2;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.DatabaseRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.EnrollmentRequest) */ {
 public:
  EnrollmentRequest();
  virtual ~EnrollmentRequest();

  EnrollmentRequest(const EnrollmentRequest& from);
  EnrollmentRequest(EnrollmentRequest&& from) noexcept
    : EnrollmentRequest() {
    *this = ::std::move(from);
  }

  inline EnrollmentRequest& operator=(const EnrollmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentRequest& operator=(EnrollmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollmentRequest*>(
               &_EnrollmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnrollmentRequest& a, EnrollmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentRequest* New() const final {
    return CreateMaybeMessage<EnrollmentRequest>(nullptr);
  }

  EnrollmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentRequest& from);
  void MergeFrom(const EnrollmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.EnrollmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.EnrollmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.EnrollmentResponse) */ {
 public:
  EnrollmentResponse();
  virtual ~EnrollmentResponse();

  EnrollmentResponse(const EnrollmentResponse& from);
  EnrollmentResponse(EnrollmentResponse&& from) noexcept
    : EnrollmentResponse() {
    *this = ::std::move(from);
  }

  inline EnrollmentResponse& operator=(const EnrollmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentResponse& operator=(EnrollmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentResponse* internal_default_instance() {
    return reinterpret_cast<const EnrollmentResponse*>(
               &_EnrollmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnrollmentResponse& a, EnrollmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollmentResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentResponse* New() const final {
    return CreateMaybeMessage<EnrollmentResponse>(nullptr);
  }

  EnrollmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentResponse& from);
  void MergeFrom(const EnrollmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.EnrollmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes response = 2;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.EnrollmentResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class VerifyPasswordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.VerifyPasswordRequest) */ {
 public:
  VerifyPasswordRequest();
  virtual ~VerifyPasswordRequest();

  VerifyPasswordRequest(const VerifyPasswordRequest& from);
  VerifyPasswordRequest(VerifyPasswordRequest&& from) noexcept
    : VerifyPasswordRequest() {
    *this = ::std::move(from);
  }

  inline VerifyPasswordRequest& operator=(const VerifyPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyPasswordRequest& operator=(VerifyPasswordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyPasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyPasswordRequest*>(
               &_VerifyPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VerifyPasswordRequest& a, VerifyPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyPasswordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyPasswordRequest* New() const final {
    return CreateMaybeMessage<VerifyPasswordRequest>(nullptr);
  }

  VerifyPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyPasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyPasswordRequest& from);
  void MergeFrom(const VerifyPasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyPasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.VerifyPasswordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes request = 2;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const void* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.VerifyPasswordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class VerifyPasswordResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.VerifyPasswordResponse) */ {
 public:
  VerifyPasswordResponse();
  virtual ~VerifyPasswordResponse();

  VerifyPasswordResponse(const VerifyPasswordResponse& from);
  VerifyPasswordResponse(VerifyPasswordResponse&& from) noexcept
    : VerifyPasswordResponse() {
    *this = ::std::move(from);
  }

  inline VerifyPasswordResponse& operator=(const VerifyPasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyPasswordResponse& operator=(VerifyPasswordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyPasswordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyPasswordResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyPasswordResponse*>(
               &_VerifyPasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VerifyPasswordResponse& a, VerifyPasswordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyPasswordResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyPasswordResponse* New() const final {
    return CreateMaybeMessage<VerifyPasswordResponse>(nullptr);
  }

  VerifyPasswordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyPasswordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyPasswordResponse& from);
  void MergeFrom(const VerifyPasswordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyPasswordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.VerifyPasswordResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // bytes response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:build.VerifyPasswordResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class VersionedUpdateToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.VersionedUpdateToken) */ {
 public:
  VersionedUpdateToken();
  virtual ~VersionedUpdateToken();

  VersionedUpdateToken(const VersionedUpdateToken& from);
  VersionedUpdateToken(VersionedUpdateToken&& from) noexcept
    : VersionedUpdateToken() {
    *this = ::std::move(from);
  }

  inline VersionedUpdateToken& operator=(const VersionedUpdateToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionedUpdateToken& operator=(VersionedUpdateToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionedUpdateToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionedUpdateToken* internal_default_instance() {
    return reinterpret_cast<const VersionedUpdateToken*>(
               &_VersionedUpdateToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VersionedUpdateToken& a, VersionedUpdateToken& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionedUpdateToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionedUpdateToken* New() const final {
    return CreateMaybeMessage<VersionedUpdateToken>(nullptr);
  }

  VersionedUpdateToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionedUpdateToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionedUpdateToken& from);
  void MergeFrom(const VersionedUpdateToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionedUpdateToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.VersionedUpdateToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateTokenFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes update_token = 2;
  void clear_update_token();
  const std::string& update_token() const;
  void set_update_token(const std::string& value);
  void set_update_token(std::string&& value);
  void set_update_token(const char* value);
  void set_update_token(const void* value, size_t size);
  std::string* mutable_update_token();
  std::string* release_update_token();
  void set_allocated_update_token(std::string* update_token);
  private:
  const std::string& _internal_update_token() const;
  void _internal_set_update_token(const std::string& value);
  std::string* _internal_mutable_update_token();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.VersionedUpdateToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// -------------------------------------------------------------------

class HttpError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.HttpError) */ {
 public:
  HttpError();
  virtual ~HttpError();

  HttpError(const HttpError& from);
  HttpError(HttpError&& from) noexcept
    : HttpError() {
    *this = ::std::move(from);
  }

  inline HttpError& operator=(const HttpError& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpError& operator=(HttpError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpError* internal_default_instance() {
    return reinterpret_cast<const HttpError*>(
               &_HttpError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HttpError& a, HttpError& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpError* New() const final {
    return CreateMaybeMessage<HttpError>(nullptr);
  }

  HttpError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpError& from);
  void MergeFrom(const HttpError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.HttpError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekit_2eproto);
    return ::descriptor_table_purekit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.HttpError)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatabaseRecord

// uint32 version = 1;
inline void DatabaseRecord::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseRecord::version() const {
  // @@protoc_insertion_point(field_get:build.DatabaseRecord.version)
  return _internal_version();
}
inline void DatabaseRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void DatabaseRecord::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.DatabaseRecord.version)
}

// bytes record = 2;
inline void DatabaseRecord::clear_record() {
  record_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DatabaseRecord::record() const {
  // @@protoc_insertion_point(field_get:build.DatabaseRecord.record)
  return _internal_record();
}
inline void DatabaseRecord::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:build.DatabaseRecord.record)
}
inline std::string* DatabaseRecord::mutable_record() {
  // @@protoc_insertion_point(field_mutable:build.DatabaseRecord.record)
  return _internal_mutable_record();
}
inline const std::string& DatabaseRecord::_internal_record() const {
  return record_.GetNoArena();
}
inline void DatabaseRecord::_internal_set_record(const std::string& value) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DatabaseRecord::set_record(std::string&& value) {
  
  record_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.DatabaseRecord.record)
}
inline void DatabaseRecord::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.DatabaseRecord.record)
}
inline void DatabaseRecord::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.DatabaseRecord.record)
}
inline std::string* DatabaseRecord::_internal_mutable_record() {
  
  return record_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DatabaseRecord::release_record() {
  // @@protoc_insertion_point(field_release:build.DatabaseRecord.record)
  
  return record_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseRecord::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:build.DatabaseRecord.record)
}

// -------------------------------------------------------------------

// EnrollmentRequest

// uint32 version = 1;
inline void EnrollmentRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnrollmentRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnrollmentRequest::version() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentRequest.version)
  return _internal_version();
}
inline void EnrollmentRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void EnrollmentRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentRequest.version)
}

// -------------------------------------------------------------------

// EnrollmentResponse

// uint32 version = 1;
inline void EnrollmentResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnrollmentResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnrollmentResponse::version() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentResponse.version)
  return _internal_version();
}
inline void EnrollmentResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void EnrollmentResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentResponse.version)
}

// bytes response = 2;
inline void EnrollmentResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentResponse::response() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentResponse.response)
  return _internal_response();
}
inline void EnrollmentResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentResponse.response)
}
inline std::string* EnrollmentResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:build.EnrollmentResponse.response)
  return _internal_mutable_response();
}
inline const std::string& EnrollmentResponse::_internal_response() const {
  return response_.GetNoArena();
}
inline void EnrollmentResponse::_internal_set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnrollmentResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EnrollmentResponse.response)
}
inline void EnrollmentResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EnrollmentResponse.response)
}
inline void EnrollmentResponse::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EnrollmentResponse.response)
}
inline std::string* EnrollmentResponse::_internal_mutable_response() {
  
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentResponse::release_response() {
  // @@protoc_insertion_point(field_release:build.EnrollmentResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:build.EnrollmentResponse.response)
}

// -------------------------------------------------------------------

// VerifyPasswordRequest

// uint32 version = 1;
inline void VerifyPasswordRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VerifyPasswordRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VerifyPasswordRequest::version() const {
  // @@protoc_insertion_point(field_get:build.VerifyPasswordRequest.version)
  return _internal_version();
}
inline void VerifyPasswordRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void VerifyPasswordRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.VerifyPasswordRequest.version)
}

// bytes request = 2;
inline void VerifyPasswordRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyPasswordRequest::request() const {
  // @@protoc_insertion_point(field_get:build.VerifyPasswordRequest.request)
  return _internal_request();
}
inline void VerifyPasswordRequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:build.VerifyPasswordRequest.request)
}
inline std::string* VerifyPasswordRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:build.VerifyPasswordRequest.request)
  return _internal_mutable_request();
}
inline const std::string& VerifyPasswordRequest::_internal_request() const {
  return request_.GetNoArena();
}
inline void VerifyPasswordRequest::_internal_set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyPasswordRequest::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.VerifyPasswordRequest.request)
}
inline void VerifyPasswordRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.VerifyPasswordRequest.request)
}
inline void VerifyPasswordRequest::set_request(const void* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.VerifyPasswordRequest.request)
}
inline std::string* VerifyPasswordRequest::_internal_mutable_request() {
  
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyPasswordRequest::release_request() {
  // @@protoc_insertion_point(field_release:build.VerifyPasswordRequest.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPasswordRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:build.VerifyPasswordRequest.request)
}

// -------------------------------------------------------------------

// VerifyPasswordResponse

// bytes response = 1;
inline void VerifyPasswordResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyPasswordResponse::response() const {
  // @@protoc_insertion_point(field_get:build.VerifyPasswordResponse.response)
  return _internal_response();
}
inline void VerifyPasswordResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:build.VerifyPasswordResponse.response)
}
inline std::string* VerifyPasswordResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:build.VerifyPasswordResponse.response)
  return _internal_mutable_response();
}
inline const std::string& VerifyPasswordResponse::_internal_response() const {
  return response_.GetNoArena();
}
inline void VerifyPasswordResponse::_internal_set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyPasswordResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.VerifyPasswordResponse.response)
}
inline void VerifyPasswordResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.VerifyPasswordResponse.response)
}
inline void VerifyPasswordResponse::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.VerifyPasswordResponse.response)
}
inline std::string* VerifyPasswordResponse::_internal_mutable_response() {
  
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyPasswordResponse::release_response() {
  // @@protoc_insertion_point(field_release:build.VerifyPasswordResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyPasswordResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:build.VerifyPasswordResponse.response)
}

// -------------------------------------------------------------------

// VersionedUpdateToken

// uint32 version = 1;
inline void VersionedUpdateToken::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionedUpdateToken::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionedUpdateToken::version() const {
  // @@protoc_insertion_point(field_get:build.VersionedUpdateToken.version)
  return _internal_version();
}
inline void VersionedUpdateToken::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void VersionedUpdateToken::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.VersionedUpdateToken.version)
}

// bytes update_token = 2;
inline void VersionedUpdateToken::clear_update_token() {
  update_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionedUpdateToken::update_token() const {
  // @@protoc_insertion_point(field_get:build.VersionedUpdateToken.update_token)
  return _internal_update_token();
}
inline void VersionedUpdateToken::set_update_token(const std::string& value) {
  _internal_set_update_token(value);
  // @@protoc_insertion_point(field_set:build.VersionedUpdateToken.update_token)
}
inline std::string* VersionedUpdateToken::mutable_update_token() {
  // @@protoc_insertion_point(field_mutable:build.VersionedUpdateToken.update_token)
  return _internal_mutable_update_token();
}
inline const std::string& VersionedUpdateToken::_internal_update_token() const {
  return update_token_.GetNoArena();
}
inline void VersionedUpdateToken::_internal_set_update_token(const std::string& value) {
  
  update_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VersionedUpdateToken::set_update_token(std::string&& value) {
  
  update_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.VersionedUpdateToken.update_token)
}
inline void VersionedUpdateToken::set_update_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.VersionedUpdateToken.update_token)
}
inline void VersionedUpdateToken::set_update_token(const void* value, size_t size) {
  
  update_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.VersionedUpdateToken.update_token)
}
inline std::string* VersionedUpdateToken::_internal_mutable_update_token() {
  
  return update_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionedUpdateToken::release_update_token() {
  // @@protoc_insertion_point(field_release:build.VersionedUpdateToken.update_token)
  
  return update_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionedUpdateToken::set_allocated_update_token(std::string* update_token) {
  if (update_token != nullptr) {
    
  } else {
    
  }
  update_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_token);
  // @@protoc_insertion_point(field_set_allocated:build.VersionedUpdateToken.update_token)
}

// -------------------------------------------------------------------

// HttpError

// uint32 code = 1;
inline void HttpError::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HttpError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HttpError::code() const {
  // @@protoc_insertion_point(field_get:build.HttpError.code)
  return _internal_code();
}
inline void HttpError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void HttpError::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:build.HttpError.code)
}

// string message = 2;
inline void HttpError::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HttpError::message() const {
  // @@protoc_insertion_point(field_get:build.HttpError.message)
  return _internal_message();
}
inline void HttpError::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:build.HttpError.message)
}
inline std::string* HttpError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:build.HttpError.message)
  return _internal_mutable_message();
}
inline const std::string& HttpError::_internal_message() const {
  return message_.GetNoArena();
}
inline void HttpError::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HttpError::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.HttpError.message)
}
inline void HttpError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.HttpError.message)
}
inline void HttpError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.HttpError.message)
}
inline std::string* HttpError::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HttpError::release_message() {
  // @@protoc_insertion_point(field_release:build.HttpError.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HttpError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:build.HttpError.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace build

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_purekit_2eproto
