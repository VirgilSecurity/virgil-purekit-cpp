// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: purekitV3_grant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fgrant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fgrant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_purekitV3_5fgrant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_purekitV3_5fgrant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_purekitV3_5fgrant_2eproto;
namespace build {
class EncryptedGrant;
class EncryptedGrantDefaultTypeInternal;
extern EncryptedGrantDefaultTypeInternal _EncryptedGrant_default_instance_;
class EncryptedGrantHeader;
class EncryptedGrantHeaderDefaultTypeInternal;
extern EncryptedGrantHeaderDefaultTypeInternal _EncryptedGrantHeader_default_instance_;
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::EncryptedGrant* Arena::CreateMaybeMessage<::build::EncryptedGrant>(Arena*);
template<> ::build::EncryptedGrantHeader* Arena::CreateMaybeMessage<::build::EncryptedGrantHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {

// ===================================================================

class EncryptedGrantHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.EncryptedGrantHeader) */ {
 public:
  EncryptedGrantHeader();
  virtual ~EncryptedGrantHeader();

  EncryptedGrantHeader(const EncryptedGrantHeader& from);
  EncryptedGrantHeader(EncryptedGrantHeader&& from) noexcept
    : EncryptedGrantHeader() {
    *this = ::std::move(from);
  }

  inline EncryptedGrantHeader& operator=(const EncryptedGrantHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedGrantHeader& operator=(EncryptedGrantHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedGrantHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptedGrantHeader* internal_default_instance() {
    return reinterpret_cast<const EncryptedGrantHeader*>(
               &_EncryptedGrantHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedGrantHeader& a, EncryptedGrantHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedGrantHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedGrantHeader* New() const final {
    return CreateMaybeMessage<EncryptedGrantHeader>(nullptr);
  }

  EncryptedGrantHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedGrantHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedGrantHeader& from);
  void MergeFrom(const EncryptedGrantHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedGrantHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.EncryptedGrantHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fgrant_2eproto);
    return ::descriptor_table_purekitV3_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kCreationDateFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // uint32 creation_date = 1;
  void clear_creation_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 creation_date() const;
  void set_creation_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creation_date() const;
  void _internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.EncryptedGrantHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creation_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fgrant_2eproto;
};
// -------------------------------------------------------------------

class EncryptedGrant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.EncryptedGrant) */ {
 public:
  EncryptedGrant();
  virtual ~EncryptedGrant();

  EncryptedGrant(const EncryptedGrant& from);
  EncryptedGrant(EncryptedGrant&& from) noexcept
    : EncryptedGrant() {
    *this = ::std::move(from);
  }

  inline EncryptedGrant& operator=(const EncryptedGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedGrant& operator=(EncryptedGrant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedGrant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptedGrant* internal_default_instance() {
    return reinterpret_cast<const EncryptedGrant*>(
               &_EncryptedGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptedGrant& a, EncryptedGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedGrant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedGrant* New() const final {
    return CreateMaybeMessage<EncryptedGrant>(nullptr);
  }

  EncryptedGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedGrant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedGrant& from);
  void MergeFrom(const EncryptedGrant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedGrant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.EncryptedGrant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fgrant_2eproto);
    return ::descriptor_table_purekitV3_5fgrant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedPhekFieldNumber = 2,
    kHeaderFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes encrypted_phek = 2;
  void clear_encrypted_phek();
  const std::string& encrypted_phek() const;
  void set_encrypted_phek(const std::string& value);
  void set_encrypted_phek(std::string&& value);
  void set_encrypted_phek(const char* value);
  void set_encrypted_phek(const void* value, size_t size);
  std::string* mutable_encrypted_phek();
  std::string* release_encrypted_phek();
  void set_allocated_encrypted_phek(std::string* encrypted_phek);
  private:
  const std::string& _internal_encrypted_phek() const;
  void _internal_set_encrypted_phek(const std::string& value);
  std::string* _internal_mutable_encrypted_phek();
  public:

  // bytes header = 3;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.EncryptedGrant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_phek_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fgrant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedGrantHeader

// uint32 creation_date = 1;
inline void EncryptedGrantHeader::clear_creation_date() {
  creation_date_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedGrantHeader::_internal_creation_date() const {
  return creation_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedGrantHeader::creation_date() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrantHeader.creation_date)
  return _internal_creation_date();
}
inline void EncryptedGrantHeader::_internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  creation_date_ = value;
}
inline void EncryptedGrantHeader::set_creation_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrantHeader.creation_date)
}

// string user_id = 2;
inline void EncryptedGrantHeader::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncryptedGrantHeader::user_id() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrantHeader.user_id)
  return _internal_user_id();
}
inline void EncryptedGrantHeader::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrantHeader.user_id)
}
inline std::string* EncryptedGrantHeader::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:build.EncryptedGrantHeader.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& EncryptedGrantHeader::_internal_user_id() const {
  return user_id_.GetNoArena();
}
inline void EncryptedGrantHeader::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptedGrantHeader::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EncryptedGrantHeader.user_id)
}
inline void EncryptedGrantHeader::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EncryptedGrantHeader.user_id)
}
inline void EncryptedGrantHeader::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EncryptedGrantHeader.user_id)
}
inline std::string* EncryptedGrantHeader::_internal_mutable_user_id() {
  
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptedGrantHeader::release_user_id() {
  // @@protoc_insertion_point(field_release:build.EncryptedGrantHeader.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedGrantHeader::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:build.EncryptedGrantHeader.user_id)
}

// string session_id = 3;
inline void EncryptedGrantHeader::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncryptedGrantHeader::session_id() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrantHeader.session_id)
  return _internal_session_id();
}
inline void EncryptedGrantHeader::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrantHeader.session_id)
}
inline std::string* EncryptedGrantHeader::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:build.EncryptedGrantHeader.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& EncryptedGrantHeader::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void EncryptedGrantHeader::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptedGrantHeader::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EncryptedGrantHeader.session_id)
}
inline void EncryptedGrantHeader::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EncryptedGrantHeader.session_id)
}
inline void EncryptedGrantHeader::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EncryptedGrantHeader.session_id)
}
inline std::string* EncryptedGrantHeader::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptedGrantHeader::release_session_id() {
  // @@protoc_insertion_point(field_release:build.EncryptedGrantHeader.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedGrantHeader::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:build.EncryptedGrantHeader.session_id)
}

// -------------------------------------------------------------------

// EncryptedGrant

// uint32 version = 1;
inline void EncryptedGrant::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedGrant::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncryptedGrant::version() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrant.version)
  return _internal_version();
}
inline void EncryptedGrant::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void EncryptedGrant::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrant.version)
}

// bytes encrypted_phek = 2;
inline void EncryptedGrant::clear_encrypted_phek() {
  encrypted_phek_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncryptedGrant::encrypted_phek() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrant.encrypted_phek)
  return _internal_encrypted_phek();
}
inline void EncryptedGrant::set_encrypted_phek(const std::string& value) {
  _internal_set_encrypted_phek(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrant.encrypted_phek)
}
inline std::string* EncryptedGrant::mutable_encrypted_phek() {
  // @@protoc_insertion_point(field_mutable:build.EncryptedGrant.encrypted_phek)
  return _internal_mutable_encrypted_phek();
}
inline const std::string& EncryptedGrant::_internal_encrypted_phek() const {
  return encrypted_phek_.GetNoArena();
}
inline void EncryptedGrant::_internal_set_encrypted_phek(const std::string& value) {
  
  encrypted_phek_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptedGrant::set_encrypted_phek(std::string&& value) {
  
  encrypted_phek_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EncryptedGrant.encrypted_phek)
}
inline void EncryptedGrant::set_encrypted_phek(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_phek_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EncryptedGrant.encrypted_phek)
}
inline void EncryptedGrant::set_encrypted_phek(const void* value, size_t size) {
  
  encrypted_phek_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EncryptedGrant.encrypted_phek)
}
inline std::string* EncryptedGrant::_internal_mutable_encrypted_phek() {
  
  return encrypted_phek_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptedGrant::release_encrypted_phek() {
  // @@protoc_insertion_point(field_release:build.EncryptedGrant.encrypted_phek)
  
  return encrypted_phek_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedGrant::set_allocated_encrypted_phek(std::string* encrypted_phek) {
  if (encrypted_phek != nullptr) {
    
  } else {
    
  }
  encrypted_phek_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_phek);
  // @@protoc_insertion_point(field_set_allocated:build.EncryptedGrant.encrypted_phek)
}

// bytes header = 3;
inline void EncryptedGrant::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncryptedGrant::header() const {
  // @@protoc_insertion_point(field_get:build.EncryptedGrant.header)
  return _internal_header();
}
inline void EncryptedGrant::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:build.EncryptedGrant.header)
}
inline std::string* EncryptedGrant::mutable_header() {
  // @@protoc_insertion_point(field_mutable:build.EncryptedGrant.header)
  return _internal_mutable_header();
}
inline const std::string& EncryptedGrant::_internal_header() const {
  return header_.GetNoArena();
}
inline void EncryptedGrant::_internal_set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptedGrant::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EncryptedGrant.header)
}
inline void EncryptedGrant::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EncryptedGrant.header)
}
inline void EncryptedGrant::set_header(const void* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EncryptedGrant.header)
}
inline std::string* EncryptedGrant::_internal_mutable_header() {
  
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptedGrant::release_header() {
  // @@protoc_insertion_point(field_release:build.EncryptedGrant.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedGrant::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:build.EncryptedGrant.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace build

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fgrant_2eproto
