// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: purekitV3_crypto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fcrypto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fcrypto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_purekitV3_5fcrypto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_purekitV3_5fcrypto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_purekitV3_5fcrypto_2eproto;
namespace build {
class EnrollmentRecord;
class EnrollmentRecordDefaultTypeInternal;
extern EnrollmentRecordDefaultTypeInternal _EnrollmentRecord_default_instance_;
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::EnrollmentRecord* Arena::CreateMaybeMessage<::build::EnrollmentRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {

// ===================================================================

class EnrollmentRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.EnrollmentRecord) */ {
 public:
  EnrollmentRecord();
  virtual ~EnrollmentRecord();

  EnrollmentRecord(const EnrollmentRecord& from);
  EnrollmentRecord(EnrollmentRecord&& from) noexcept
    : EnrollmentRecord() {
    *this = ::std::move(from);
  }

  inline EnrollmentRecord& operator=(const EnrollmentRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentRecord& operator=(EnrollmentRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollmentRecord* internal_default_instance() {
    return reinterpret_cast<const EnrollmentRecord*>(
               &_EnrollmentRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnrollmentRecord& a, EnrollmentRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollmentRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentRecord* New() const final {
    return CreateMaybeMessage<EnrollmentRecord>(nullptr);
  }

  EnrollmentRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentRecord& from);
  void MergeFrom(const EnrollmentRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.EnrollmentRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_purekitV3_5fcrypto_2eproto);
    return ::descriptor_table_purekitV3_5fcrypto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNsFieldNumber = 1,
    kNcFieldNumber = 2,
    kT0FieldNumber = 3,
    kT1FieldNumber = 4,
  };
  // bytes ns = 1;
  void clear_ns();
  const std::string& ns() const;
  void set_ns(const std::string& value);
  void set_ns(std::string&& value);
  void set_ns(const char* value);
  void set_ns(const void* value, size_t size);
  std::string* mutable_ns();
  std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // bytes nc = 2;
  void clear_nc();
  const std::string& nc() const;
  void set_nc(const std::string& value);
  void set_nc(std::string&& value);
  void set_nc(const char* value);
  void set_nc(const void* value, size_t size);
  std::string* mutable_nc();
  std::string* release_nc();
  void set_allocated_nc(std::string* nc);
  private:
  const std::string& _internal_nc() const;
  void _internal_set_nc(const std::string& value);
  std::string* _internal_mutable_nc();
  public:

  // bytes t0 = 3;
  void clear_t0();
  const std::string& t0() const;
  void set_t0(const std::string& value);
  void set_t0(std::string&& value);
  void set_t0(const char* value);
  void set_t0(const void* value, size_t size);
  std::string* mutable_t0();
  std::string* release_t0();
  void set_allocated_t0(std::string* t0);
  private:
  const std::string& _internal_t0() const;
  void _internal_set_t0(const std::string& value);
  std::string* _internal_mutable_t0();
  public:

  // bytes t1 = 4;
  void clear_t1();
  const std::string& t1() const;
  void set_t1(const std::string& value);
  void set_t1(std::string&& value);
  void set_t1(const char* value);
  void set_t1(const void* value, size_t size);
  std::string* mutable_t1();
  std::string* release_t1();
  void set_allocated_t1(std::string* t1);
  private:
  const std::string& _internal_t1() const;
  void _internal_set_t1(const std::string& value);
  std::string* _internal_mutable_t1();
  public:

  // @@protoc_insertion_point(class_scope:build.EnrollmentRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_purekitV3_5fcrypto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnrollmentRecord

// bytes ns = 1;
inline void EnrollmentRecord::clear_ns() {
  ns_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentRecord::ns() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentRecord.ns)
  return _internal_ns();
}
inline void EnrollmentRecord::set_ns(const std::string& value) {
  _internal_set_ns(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentRecord.ns)
}
inline std::string* EnrollmentRecord::mutable_ns() {
  // @@protoc_insertion_point(field_mutable:build.EnrollmentRecord.ns)
  return _internal_mutable_ns();
}
inline const std::string& EnrollmentRecord::_internal_ns() const {
  return ns_.GetNoArena();
}
inline void EnrollmentRecord::_internal_set_ns(const std::string& value) {
  
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnrollmentRecord::set_ns(std::string&& value) {
  
  ns_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EnrollmentRecord.ns)
}
inline void EnrollmentRecord::set_ns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EnrollmentRecord.ns)
}
inline void EnrollmentRecord::set_ns(const void* value, size_t size) {
  
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EnrollmentRecord.ns)
}
inline std::string* EnrollmentRecord::_internal_mutable_ns() {
  
  return ns_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentRecord::release_ns() {
  // @@protoc_insertion_point(field_release:build.EnrollmentRecord.ns)
  
  return ns_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentRecord::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:build.EnrollmentRecord.ns)
}

// bytes nc = 2;
inline void EnrollmentRecord::clear_nc() {
  nc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentRecord::nc() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentRecord.nc)
  return _internal_nc();
}
inline void EnrollmentRecord::set_nc(const std::string& value) {
  _internal_set_nc(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentRecord.nc)
}
inline std::string* EnrollmentRecord::mutable_nc() {
  // @@protoc_insertion_point(field_mutable:build.EnrollmentRecord.nc)
  return _internal_mutable_nc();
}
inline const std::string& EnrollmentRecord::_internal_nc() const {
  return nc_.GetNoArena();
}
inline void EnrollmentRecord::_internal_set_nc(const std::string& value) {
  
  nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnrollmentRecord::set_nc(std::string&& value) {
  
  nc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EnrollmentRecord.nc)
}
inline void EnrollmentRecord::set_nc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EnrollmentRecord.nc)
}
inline void EnrollmentRecord::set_nc(const void* value, size_t size) {
  
  nc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EnrollmentRecord.nc)
}
inline std::string* EnrollmentRecord::_internal_mutable_nc() {
  
  return nc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentRecord::release_nc() {
  // @@protoc_insertion_point(field_release:build.EnrollmentRecord.nc)
  
  return nc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentRecord::set_allocated_nc(std::string* nc) {
  if (nc != nullptr) {
    
  } else {
    
  }
  nc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nc);
  // @@protoc_insertion_point(field_set_allocated:build.EnrollmentRecord.nc)
}

// bytes t0 = 3;
inline void EnrollmentRecord::clear_t0() {
  t0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentRecord::t0() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentRecord.t0)
  return _internal_t0();
}
inline void EnrollmentRecord::set_t0(const std::string& value) {
  _internal_set_t0(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentRecord.t0)
}
inline std::string* EnrollmentRecord::mutable_t0() {
  // @@protoc_insertion_point(field_mutable:build.EnrollmentRecord.t0)
  return _internal_mutable_t0();
}
inline const std::string& EnrollmentRecord::_internal_t0() const {
  return t0_.GetNoArena();
}
inline void EnrollmentRecord::_internal_set_t0(const std::string& value) {
  
  t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnrollmentRecord::set_t0(std::string&& value) {
  
  t0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EnrollmentRecord.t0)
}
inline void EnrollmentRecord::set_t0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EnrollmentRecord.t0)
}
inline void EnrollmentRecord::set_t0(const void* value, size_t size) {
  
  t0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EnrollmentRecord.t0)
}
inline std::string* EnrollmentRecord::_internal_mutable_t0() {
  
  return t0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentRecord::release_t0() {
  // @@protoc_insertion_point(field_release:build.EnrollmentRecord.t0)
  
  return t0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentRecord::set_allocated_t0(std::string* t0) {
  if (t0 != nullptr) {
    
  } else {
    
  }
  t0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), t0);
  // @@protoc_insertion_point(field_set_allocated:build.EnrollmentRecord.t0)
}

// bytes t1 = 4;
inline void EnrollmentRecord::clear_t1() {
  t1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnrollmentRecord::t1() const {
  // @@protoc_insertion_point(field_get:build.EnrollmentRecord.t1)
  return _internal_t1();
}
inline void EnrollmentRecord::set_t1(const std::string& value) {
  _internal_set_t1(value);
  // @@protoc_insertion_point(field_set:build.EnrollmentRecord.t1)
}
inline std::string* EnrollmentRecord::mutable_t1() {
  // @@protoc_insertion_point(field_mutable:build.EnrollmentRecord.t1)
  return _internal_mutable_t1();
}
inline const std::string& EnrollmentRecord::_internal_t1() const {
  return t1_.GetNoArena();
}
inline void EnrollmentRecord::_internal_set_t1(const std::string& value) {
  
  t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnrollmentRecord::set_t1(std::string&& value) {
  
  t1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:build.EnrollmentRecord.t1)
}
inline void EnrollmentRecord::set_t1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:build.EnrollmentRecord.t1)
}
inline void EnrollmentRecord::set_t1(const void* value, size_t size) {
  
  t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:build.EnrollmentRecord.t1)
}
inline std::string* EnrollmentRecord::_internal_mutable_t1() {
  
  return t1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnrollmentRecord::release_t1() {
  // @@protoc_insertion_point(field_release:build.EnrollmentRecord.t1)
  
  return t1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentRecord::set_allocated_t1(std::string* t1) {
  if (t1 != nullptr) {
    
  } else {
    
  }
  t1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), t1);
  // @@protoc_insertion_point(field_set_allocated:build.EnrollmentRecord.t1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace build

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_purekitV3_5fcrypto_2eproto
